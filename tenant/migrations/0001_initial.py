# Generated by Django 5.2 on 2025-06-03 15:19

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import django_multitenant.mixins
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='TenantUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('clinic_name', models.CharField(max_length=255)),
                ('clinic_email', models.EmailField(max_length=254, unique=True)),
                ('website', models.CharField(blank=True, max_length=255, null=True)),
                ('country', models.CharField(max_length=255)),
                ('phonenumber', models.CharField(max_length=16, unique=True, validators=[django.core.validators.RegexValidator(regex='^\\+\\d{9,15}$')])),
                ('address', models.TextField()),
                ('subscription', models.CharField(default='Basic', max_length=50)),
                ('email_verified', models.BooleanField(default=False)),
                ('phonenumber_verified', models.BooleanField(default=False)),
                ('token_valid', models.BooleanField(default=False)),
                ('role', models.CharField(choices=[('tenant', 'Tenant'), ('developer', 'Developer')], default='tenant', max_length=9)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AutomationScript',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('script_name', models.CharField(max_length=255)),
                ('script_code', models.TextField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('tenant_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='automation_scripts', to=settings.AUTH_USER_MODEL)),
            ],
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AutomationState',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('state', models.BooleanField(default=False)),
                ('tenant_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='automation_state', to=settings.AUTH_USER_MODEL)),
            ],
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='EmailDeviceOTP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('confirmed', models.BooleanField(default=True, help_text='Is this device ready for use?')),
                ('otp_code', models.CharField(blank=True, max_length=6, null=True)),
                ('valid_until', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='otp', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, django_multitenant.mixins.TenantModelMixin),
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phonenumber', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(regex='^\\+?\\d{9,15}$')])),
                ('date_of_birth', models.DateField()),
                ('tenant_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patients', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': [('can_add_patient', 'Can add patient'), ('can_change_patient', 'Can change patient'), ('can_view_patient', 'Can view patient'), ('can_delete_patient', 'Can delete patient')],
                'constraints': [models.UniqueConstraint(fields=('tenant_user', 'id'), name='unique_patient_id_per_tenant'), models.UniqueConstraint(fields=('tenant_user', 'phonenumber'), name='unique_patient_phone_per_tenant'), models.UniqueConstraint(condition=models.Q(('email__isnull', False)), fields=('tenant_user', 'email'), name='unique_patient_email_per_tenant')],
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=255, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('position', models.CharField(max_length=255)),
                ('role', models.CharField(choices=[('regular', 'regular'), ('admin', 'admin')], default=('regular', 'regular'), max_length=12)),
                ('email_verified', models.BooleanField(default=False)),
                ('token_valid', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, related_name='tenant_staff_groups', to='auth.group')),
                ('tenant_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='staff', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='tenant_staff_permissions', to='auth.permission')),
            ],
            options={
                'permissions': [('can_add_staff', 'Can add staff'), ('can_change_staff', 'Can change staff'), ('can_view_staff', 'Can view staff'), ('can_delete_staff', 'Can delete staff')],
                'constraints': [models.UniqueConstraint(fields=('tenant_user', 'id'), name='unique_staff_id_per_tenant'), models.UniqueConstraint(fields=('tenant_user', 'email'), name='unique_staff_email_per_tenant')],
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
        ),
    ]
